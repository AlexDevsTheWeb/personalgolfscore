import { IRoundTotals } from "@/types/roundTotals.types";
import { divide } from "../totals/totalsGenFunc.utils";

export const allRoundsCalculator = (totals: IRoundTotals[]) => {
  const totalsRounds: number = totals.length;
  const totalScores = totals.reduce((sum, item) => {
    return {
      score: {
        totals: sum.score.totals + item.score.totals,
        avg: Number(sum.score.avg) + Number(item.score.avg),
        vsPar: sum.score.vsPar + item.score.vsPar,
        scoreIN: sum.score.scoreIN + item.score.scoreIN,
        scoreOUT: sum.score.scoreOUT + item.score.scoreOUT,
        vsParIN: sum.score.vsParIN + item.score.vsParIN,
        vsParOUT: sum.score.vsParOUT + item.score.vsParOUT,
        avgIN: Number(sum.score.avgIN) + Number(item.score.avgIN),
        avgOUT: Number(sum.score.avgOUT) + Number(item.score.avgOUT),
        par3: sum.score.par3 + item.score.par3,
        par4: sum.score.par4 + item.score.par4,
        par5: sum.score.par5 + item.score.par5,
        scoreEagleBetter: sum.score.scoreEagleBetter + item.score.scoreEagleBetter,
        scoreBirdie: sum.score.scoreBirdie + item.score.scoreBirdie,
        scorePar: sum.score.scorePar + item.score.scorePar,
        scoreBogey: sum.score.scoreBogey + item.score.scoreBogey,
        scoreDoubleBogeyWorst: sum.score.scoreDoubleBogeyWorst + item.score.scoreDoubleBogeyWorst,
        scorePar3: sum.score.scorePar3 + item.score.scorePar3,
        scorePar4: sum.score.scorePar4 + item.score.scorePar4,
        scorePar5: sum.score.scorePar5 + item.score.scorePar5,
      },
      points: {
        totals: sum.points.totals + item.points.totals,
        avg: Number(sum.points.avg) + Number(item.points.avg),
        pointsIN: sum.points.pointsIN + item.points.pointsIN,
        pointsOUT: sum.points.pointsOUT + item.points.pointsOUT,
        avgIN: Number(sum.points.avgIN) + Number(item.points.avgIN),
        avgOUT: Number(sum.points.avgOUT) + Number(item.points.avgOUT),
      },
      fairway: {
        total: sum.fairway.total + item.fairway.total,
        fairwayCenter: sum.fairway.fairwayCenter + item.fairway.fairwayCenter,
        fairwayLeft: sum.fairway.fairwayLeft + item.fairway.fairwayLeft,
        fairwayRight: sum.fairway.fairwayRight + item.fairway.fairwayRight,
      },
      teeShots: {
        teeDriver: {
          fairwayHits: sum.teeShots.teeDriver.fairwayHits + item.teeShots.teeDriver.fairwayHits,
          attempts: sum.teeShots.teeDriver.attempts + item.teeShots.teeDriver.attempts,
          averageDistance: sum.teeShots.teeDriver.averageDistance + item.teeShots.teeDriver.averageDistance,
          missLeft: sum.teeShots.teeDriver.missLeft + item.teeShots.teeDriver.missLeft,
          missRight: sum.teeShots.teeDriver.missRight + item.teeShots.teeDriver.missRight,
          noGreen: sum.teeShots.teeDriver.noGreen + item.teeShots.teeDriver.noGreen,
          fairwayCenterPCT: sum.teeShots.teeDriver.fairwayCenterPCT + item.teeShots.teeDriver.fairwayCenterPCT,
          fairwayLeftPCT: sum.teeShots.teeDriver.fairwayLeftPCT + item.teeShots.teeDriver.fairwayLeftPCT,
          fairwayRightPCT: sum.teeShots.teeDriver.fairwayRightPCT + item.teeShots.teeDriver.fairwayRightPCT,
        },
        teeFW: {
          fairwayHits: sum.teeShots.teeFW.fairwayHits + item.teeShots.teeFW.fairwayHits,
          attempts: sum.teeShots.teeFW.attempts + item.teeShots.teeFW.attempts,
          averageDistance: sum.teeShots.teeFW.averageDistance + item.teeShots.teeFW.averageDistance,
          missLeft: sum.teeShots.teeFW.missLeft + item.teeShots.teeFW.missLeft,
          missRight: sum.teeShots.teeFW.missRight + item.teeShots.teeFW.missRight,
          noGreen: sum.teeShots.teeFW.noGreen + item.teeShots.teeFW.noGreen,
          fairwayCenterPCT: sum.teeShots.teeFW.fairwayCenterPCT + item.teeShots.teeFW.fairwayCenterPCT,
          fairwayLeftPCT: sum.teeShots.teeFW.fairwayLeftPCT + item.teeShots.teeFW.fairwayLeftPCT,
          fairwayRightPCT: sum.teeShots.teeFW.fairwayRightPCT + item.teeShots.teeFW.fairwayRightPCT,
        },
        teeHY: {
          fairwayHits: sum.teeShots.teeHY.fairwayHits + item.teeShots.teeHY.fairwayHits,
          attempts: sum.teeShots.teeHY.attempts + item.teeShots.teeHY.attempts,
          averageDistance: sum.teeShots.teeHY.averageDistance + item.teeShots.teeHY.averageDistance,
          missLeft: sum.teeShots.teeHY.missLeft + item.teeShots.teeHY.missLeft,
          missRight: sum.teeShots.teeHY.missRight + item.teeShots.teeHY.missRight,
          noGreen: sum.teeShots.teeHY.noGreen + item.teeShots.teeHY.noGreen,
          fairwayCenterPCT: sum.teeShots.teeHY.fairwayCenterPCT + item.teeShots.teeHY.fairwayCenterPCT,
          fairwayLeftPCT: sum.teeShots.teeHY.fairwayLeftPCT + item.teeShots.teeHY.fairwayLeftPCT,
          fairwayRightPCT: sum.teeShots.teeHY.fairwayRightPCT + item.teeShots.teeHY.fairwayRightPCT,
        },
        teeIron: {
          fairwayHits: sum.teeShots.teeIron.fairwayHits + item.teeShots.teeIron.fairwayHits,
          attempts: sum.teeShots.teeIron.attempts + item.teeShots.teeIron.attempts,
          averageDistance: sum.teeShots.teeIron.averageDistance + item.teeShots.teeIron.averageDistance,
          missLeft: sum.teeShots.teeIron.missLeft + item.teeShots.teeIron.missLeft,
          missRight: sum.teeShots.teeIron.missRight + item.teeShots.teeIron.missRight,
          noGreen: sum.teeShots.teeIron.noGreen + item.teeShots.teeIron.noGreen,
          fairwayCenterPCT: sum.teeShots.teeIron.fairwayCenterPCT + item.teeShots.teeIron.fairwayCenterPCT,
          fairwayLeftPCT: sum.teeShots.teeIron.fairwayLeftPCT + item.teeShots.teeIron.fairwayLeftPCT,
          fairwayRightPCT: sum.teeShots.teeIron.fairwayRightPCT + item.teeShots.teeIron.fairwayRightPCT,
        },
      },
      chipPitch: {
        pw: {
          upDownMade: sum.chipPitch.pw.upDownMade + item.chipPitch.pw.upDownMade,
          attempts: sum.chipPitch.pw.attempts + item.chipPitch.pw.attempts,
          averageShot: sum.chipPitch.pw.averageShot + item.chipPitch.pw.averageShot,
          averageHoleDistance: sum.chipPitch.pw.averageHoleDistance + item.chipPitch.pw.averageHoleDistance,
          shotsHoled: sum.chipPitch.pw.shotsHoled + item.chipPitch.pw.shotsHoled,
          greensMissed: sum.chipPitch.pw.greensMissed + item.chipPitch.pw.greensMissed,
        },
        gw: {
          upDownMade: sum.chipPitch.gw.upDownMade + item.chipPitch.gw.upDownMade,
          attempts: sum.chipPitch.gw.attempts + item.chipPitch.gw.attempts,
          averageShot: sum.chipPitch.gw.averageShot + item.chipPitch.gw.averageShot,
          averageHoleDistance: sum.chipPitch.gw.averageHoleDistance + item.chipPitch.gw.averageHoleDistance,
          shotsHoled: sum.chipPitch.gw.shotsHoled + item.chipPitch.gw.shotsHoled,
          greensMissed: sum.chipPitch.gw.greensMissed + item.chipPitch.gw.greensMissed,
        },
        sw: {
          upDownMade: sum.chipPitch.sw.upDownMade + item.chipPitch.sw.upDownMade,
          attempts: sum.chipPitch.sw.attempts + item.chipPitch.sw.attempts,
          averageShot: sum.chipPitch.sw.averageShot + item.chipPitch.sw.averageShot,
          averageHoleDistance: sum.chipPitch.sw.averageHoleDistance + item.chipPitch.sw.averageHoleDistance,
          shotsHoled: sum.chipPitch.sw.shotsHoled + item.chipPitch.sw.shotsHoled,
          greensMissed: sum.chipPitch.sw.greensMissed + item.chipPitch.sw.greensMissed,
        },
        lw: {
          upDownMade: sum.chipPitch.lw.upDownMade + item.chipPitch.lw.upDownMade,
          attempts: sum.chipPitch.lw.attempts + item.chipPitch.lw.attempts,
          averageShot: sum.chipPitch.lw.averageShot + item.chipPitch.lw.averageShot,
          averageHoleDistance: sum.chipPitch.lw.averageHoleDistance + item.chipPitch.lw.averageHoleDistance,
          shotsHoled: sum.chipPitch.lw.shotsHoled + item.chipPitch.lw.shotsHoled,
          greensMissed: sum.chipPitch.lw.greensMissed + item.chipPitch.lw.greensMissed,
        },
        b: {
          upDownMade: sum.chipPitch.b.upDownMade + item.chipPitch.b.upDownMade,
          attempts: sum.chipPitch.b.attempts + item.chipPitch.b.attempts,
          averageShot: sum.chipPitch.b.averageShot + item.chipPitch.b.averageShot,
          averageHoleDistance: sum.chipPitch.b.averageHoleDistance + item.chipPitch.b.averageHoleDistance,
          shotsHoled: sum.chipPitch.b.shotsHoled + item.chipPitch.b.shotsHoled,
          greensMissed: sum.chipPitch.b.greensMissed + item.chipPitch.b.greensMissed,
        },
        chip: {
          upDownMade: sum.chipPitch.chip.upDownMade + item.chipPitch.chip.upDownMade,
          attempts: sum.chipPitch.chip.attempts + item.chipPitch.chip.attempts,
          averageShot: sum.chipPitch.chip.averageShot + item.chipPitch.chip.averageShot,
          averageHoleDistance: sum.chipPitch.chip.averageHoleDistance + item.chipPitch.chip.averageHoleDistance,
          shotsHoled: sum.chipPitch.chip.shotsHoled + item.chipPitch.chip.shotsHoled,
          greensMissed: sum.chipPitch.chip.greensMissed + item.chipPitch.chip.greensMissed,
        },
        putt: {
          upDownMade: sum.chipPitch.putt.upDownMade + item.chipPitch.putt.upDownMade,
          attempts: sum.chipPitch.putt.attempts + item.chipPitch.putt.attempts,
          averageShot: sum.chipPitch.putt.averageShot + item.chipPitch.putt.averageShot,
          averageHoleDistance: sum.chipPitch.putt.averageHoleDistance + item.chipPitch.putt.averageHoleDistance,
          shotsHoled: sum.chipPitch.putt.shotsHoled + item.chipPitch.putt.shotsHoled,
          greensMissed: sum.chipPitch.putt.greensMissed + item.chipPitch.putt.greensMissed,
        },
      },
      inside100Mt: {
        over100mt: {
          greensHits: sum.inside100Mt.over100mt.greensHits + item.inside100Mt.over100mt.greensHits,
          attempts: sum.inside100Mt.over100mt.attempts + item.inside100Mt.over100mt.attempts,
          averageShots: sum.inside100Mt.over100mt.averageShots + item.inside100Mt.over100mt.averageShots,
          averageDistGIR: sum.inside100Mt.over100mt.averageDistGIR + item.inside100Mt.over100mt.averageDistGIR,
          missedLeft: sum.inside100Mt.over100mt.missedLeft + item.inside100Mt.over100mt.missedLeft,
          missedRight: sum.inside100Mt.over100mt.missedRight + item.inside100Mt.over100mt.missedRight,
          missedShort: sum.inside100Mt.over100mt.missedShort + item.inside100Mt.over100mt.missedShort,
          missedLong: sum.inside100Mt.over100mt.missedLong + item.inside100Mt.over100mt.missedLong,
        },
        inside10081: {
          greensHits: sum.inside100Mt.inside10081.greensHits + item.inside100Mt.inside10081.greensHits,
          attempts: sum.inside100Mt.inside10081.attempts + item.inside100Mt.inside10081.attempts,
          averageShots: sum.inside100Mt.inside10081.averageShots + item.inside100Mt.inside10081.averageShots,
          averageDistGIR: sum.inside100Mt.inside10081.averageDistGIR + item.inside100Mt.inside10081.averageDistGIR,
          missedLeft: sum.inside100Mt.inside10081.missedLeft + item.inside100Mt.inside10081.missedLeft,
          missedRight: sum.inside100Mt.inside10081.missedRight + item.inside100Mt.inside10081.missedRight,
          missedShort: sum.inside100Mt.inside10081.missedShort + item.inside100Mt.inside10081.missedShort,
          missedLong: sum.inside100Mt.inside10081.missedLong + item.inside100Mt.inside10081.missedLong,
        },
        inside8061: {
          greensHits: sum.inside100Mt.inside8061.greensHits + item.inside100Mt.inside8061.greensHits,
          attempts: sum.inside100Mt.inside8061.attempts + item.inside100Mt.inside8061.attempts,
          averageShots: sum.inside100Mt.inside8061.averageShots + item.inside100Mt.inside8061.averageShots,
          averageDistGIR: sum.inside100Mt.inside8061.averageDistGIR + item.inside100Mt.inside8061.averageDistGIR,
          missedLeft: sum.inside100Mt.inside8061.missedLeft + item.inside100Mt.inside8061.missedLeft,
          missedRight: sum.inside100Mt.inside8061.missedRight + item.inside100Mt.inside8061.missedRight,
          missedShort: sum.inside100Mt.inside8061.missedShort + item.inside100Mt.inside8061.missedShort,
          missedLong: sum.inside100Mt.inside8061.missedLong + item.inside100Mt.inside8061.missedLong,
        },
        inside60: {
          greensHits: sum.inside100Mt.inside60.greensHits + item.inside100Mt.inside60.greensHits,
          attempts: sum.inside100Mt.inside60.attempts + item.inside100Mt.inside60.attempts,
          averageShots: sum.inside100Mt.inside60.averageShots + item.inside100Mt.inside60.averageShots,
          averageDistGIR: sum.inside100Mt.inside60.averageDistGIR + item.inside100Mt.inside60.averageDistGIR,
          missedLeft: sum.inside100Mt.inside60.missedLeft + item.inside100Mt.inside60.missedLeft,
          missedRight: sum.inside100Mt.inside60.missedRight + item.inside100Mt.inside60.missedRight,
          missedShort: sum.inside100Mt.inside60.missedShort + item.inside100Mt.inside60.missedShort,
          missedLong: sum.inside100Mt.inside60.missedLong + item.inside100Mt.inside60.missedLong,
        },
      },
      fwAndIrons: {
        fwHy: {
          greenHits: sum.fwAndIrons.fwHy.greenHits + item.fwAndIrons.fwHy.greenHits,
          attempts: sum.fwAndIrons.fwHy.attempts + item.fwAndIrons.fwHy.attempts,
          totalScorePar3: sum.fwAndIrons.fwHy.totalScorePar3 + item.fwAndIrons.fwHy.totalScorePar3,
          totalScorePar4: sum.fwAndIrons.fwHy.totalScorePar4 + item.fwAndIrons.fwHy.totalScorePar4,
          totalNumberPar4: sum.fwAndIrons.fwHy.totalNumberPar4 + item.fwAndIrons.fwHy.totalNumberPar4,
          totalScorePar5: sum.fwAndIrons.fwHy.totalScorePar5 + item.fwAndIrons.fwHy.totalScorePar5,
          totalNumberPar5: sum.fwAndIrons.fwHy.totalNumberPar5 + item.fwAndIrons.fwHy.totalNumberPar5,
          totalDistanceGIR: sum.fwAndIrons.fwHy.totalDistanceGIR + item.fwAndIrons.fwHy.totalDistanceGIR,
          totalGirGir2Made: sum.fwAndIrons.fwHy.totalGirGir2Made + item.fwAndIrons.fwHy.totalGirGir2Made,
          missedLeft: sum.fwAndIrons.fwHy.missedLeft + item.fwAndIrons.fwHy.missedLeft,
          missedRight: sum.fwAndIrons.fwHy.missedRight + item.fwAndIrons.fwHy.missedRight,
          missedShort: sum.fwAndIrons.fwHy.missedShort + item.fwAndIrons.fwHy.missedShort,
          missedOver: sum.fwAndIrons.fwHy.missedOver + item.fwAndIrons.fwHy.missedOver,
          averageShots: sum.fwAndIrons.fwHy.averageShots + item.fwAndIrons.fwHy.averageShots,
          averageDistGIR: sum.fwAndIrons.fwHy.averageDistGIR + item.fwAndIrons.fwHy.averageDistGIR,
        },
        longIrons: {
          greenHits: sum.fwAndIrons.longIrons.greenHits + item.fwAndIrons.longIrons.greenHits,
          attempts: sum.fwAndIrons.longIrons.attempts + item.fwAndIrons.longIrons.attempts,
          totalScorePar3: sum.fwAndIrons.longIrons.totalScorePar3 + item.fwAndIrons.longIrons.totalScorePar3,
          totalScorePar4: sum.fwAndIrons.longIrons.totalScorePar4 + item.fwAndIrons.longIrons.totalScorePar4,
          totalNumberPar4: sum.fwAndIrons.longIrons.totalNumberPar4 + item.fwAndIrons.longIrons.totalNumberPar4,
          totalScorePar5: sum.fwAndIrons.longIrons.totalScorePar5 + item.fwAndIrons.longIrons.totalScorePar5,
          totalNumberPar5: sum.fwAndIrons.longIrons.totalNumberPar5 + item.fwAndIrons.longIrons.totalNumberPar5,
          totalDistanceGIR: sum.fwAndIrons.longIrons.totalDistanceGIR + item.fwAndIrons.longIrons.totalDistanceGIR,
          totalGirGir2Made: sum.fwAndIrons.longIrons.totalGirGir2Made + item.fwAndIrons.longIrons.totalGirGir2Made,
          missedLeft: sum.fwAndIrons.longIrons.missedLeft + item.fwAndIrons.longIrons.missedLeft,
          missedRight: sum.fwAndIrons.longIrons.missedRight + item.fwAndIrons.longIrons.missedRight,
          missedShort: sum.fwAndIrons.longIrons.missedShort + item.fwAndIrons.longIrons.missedShort,
          missedOver: sum.fwAndIrons.longIrons.missedOver + item.fwAndIrons.longIrons.missedOver,
          averageShots: sum.fwAndIrons.longIrons.averageShots + item.fwAndIrons.longIrons.averageShots,
          averageDistGIR: sum.fwAndIrons.longIrons.averageDistGIR + item.fwAndIrons.longIrons.averageDistGIR,
        },
        shortIrons: {
          greenHits: sum.fwAndIrons.shortIrons.greenHits + item.fwAndIrons.shortIrons.greenHits,
          attempts: sum.fwAndIrons.shortIrons.attempts + item.fwAndIrons.shortIrons.attempts,
          totalScorePar3: sum.fwAndIrons.shortIrons.totalScorePar3 + item.fwAndIrons.shortIrons.totalScorePar3,
          totalScorePar4: sum.fwAndIrons.shortIrons.totalScorePar4 + item.fwAndIrons.shortIrons.totalScorePar4,
          totalNumberPar4: sum.fwAndIrons.shortIrons.totalNumberPar4 + item.fwAndIrons.shortIrons.totalNumberPar4,
          totalScorePar5: sum.fwAndIrons.shortIrons.totalScorePar5 + item.fwAndIrons.shortIrons.totalScorePar5,
          totalNumberPar5: sum.fwAndIrons.shortIrons.totalNumberPar5 + item.fwAndIrons.shortIrons.totalNumberPar5,
          totalDistanceGIR: sum.fwAndIrons.shortIrons.totalDistanceGIR + item.fwAndIrons.shortIrons.totalDistanceGIR,
          totalGirGir2Made: sum.fwAndIrons.shortIrons.totalGirGir2Made + item.fwAndIrons.shortIrons.totalGirGir2Made,
          missedLeft: sum.fwAndIrons.shortIrons.missedLeft + item.fwAndIrons.shortIrons.missedLeft,
          missedRight: sum.fwAndIrons.shortIrons.missedRight + item.fwAndIrons.shortIrons.missedRight,
          missedShort: sum.fwAndIrons.shortIrons.missedShort + item.fwAndIrons.shortIrons.missedShort,
          missedOver: sum.fwAndIrons.shortIrons.missedOver + item.fwAndIrons.shortIrons.missedOver,
          averageShots: sum.fwAndIrons.shortIrons.averageShots + item.fwAndIrons.shortIrons.averageShots,
          averageDistGIR: sum.fwAndIrons.shortIrons.averageDistGIR + item.fwAndIrons.shortIrons.averageDistGIR,
        },
      },
      gir: {
        totals: sum.gir.totals + item.gir.totals,
        avg: Number(sum.gir.avg) + Number(item.gir.avg),
        totalsIN: sum.gir.totalsIN + item.gir.totalsIN,
        avgIN: Number(sum.gir.avgIN) + Number(item.gir.avgIN),
        totalsOUT: sum.gir.totalsOUT + item.gir.totalsOUT,
        avgOUT: Number(sum.gir.avgOUT) + Number(item.gir.avgOUT),
      },
      girBogey: {
        totals: sum.gir.totals + item.gir.totals,
        avg: Number(sum.gir.avg) + Number(item.gir.avg),
        totalsIN: sum.gir.totalsIN + item.gir.totalsIN,
        avgIN: Number(sum.gir.avgIN) + Number(item.gir.avgIN),
        totalsOUT: sum.gir.totalsOUT + item.gir.totalsOUT,
        avgOUT: Number(sum.gir.avgOUT) + Number(item.gir.avgOUT),
      },
      upDown: {
        totals: sum.upDown.totals + item.upDown.totals,
        saved: sum.upDown.saved + item.upDown.saved,
        perc: sum.upDown.perc + item.upDown.perc,
      },
      scramble: {
        totals: sum.scramble.totals + item.scramble.totals,
        saved: sum.scramble.saved + item.scramble.saved,
        perc: sum.scramble.perc + item.scramble.perc,
      },
      putts: {
        totals: sum.putts.totals + item.putts.totals,
        avg: Number(sum.putts.avg) + Number(item.putts.avg),
        totalsIN: sum.putts.totalsIN + item.putts.totalsIN,
        avgIN: Number(sum.putts.avgIN) + Number(item.putts.avgIN),
        totalsOUT: sum.putts.totalsOUT + item.putts.totalsOUT,
        avgOUT: Number(sum.putts.avgOUT) + Number(item.putts.avgOUT),
        puttsGir: sum.putts.puttsGir + item.putts.puttsGir,
        puttsGirIn: sum.putts.puttsGirIn + item.putts.puttsGirIn,
        puttsGirOut: sum.putts.puttsGirOut + item.putts.puttsGirOut,
        puttsThree: sum.putts.puttsThree + item.putts.puttsThree,
        putts1: sum.putts.putts1 + item.putts.putts1,
        putts2: sum.putts.putts2 + item.putts.putts2,
        putts3More: sum.putts.putts3More + item.putts.putts3More,
        puttsDistGir: sum.putts.puttsDistGir + item.putts.puttsDistGir,
        puttsStatistics: {
          puttsU2M: {
            distanceFirstPutt: sum.putts.puttsStatistics.puttsU2M.distanceFirstPutt + item.putts.puttsStatistics.puttsU2M.distanceFirstPutt,
            distanceSecondPutt: sum.putts.puttsStatistics.puttsU2M.distanceSecondPutt + item.putts.puttsStatistics.puttsU2M.distanceSecondPutt,
            numberPuttsInRange: sum.putts.puttsStatistics.puttsU2M.numberPuttsInRange + item.putts.puttsStatistics.puttsU2M.numberPuttsInRange,
            numberSecondPutt: sum.putts.puttsStatistics.puttsU2M.numberSecondPutt + item.putts.puttsStatistics.puttsU2M.numberSecondPutt,
            putt1Perc: sum.putts.puttsStatistics.puttsU2M.putt1Perc + item.putts.puttsStatistics.puttsU2M.putt1Perc,
            putt3Perc: sum.putts.puttsStatistics.puttsU2M.putt3Perc + item.putts.puttsStatistics.puttsU2M.putt3Perc,
            putts3: sum.putts.puttsStatistics.puttsU2M.putts3 + item.putts.puttsStatistics.puttsU2M.putts3,
            puttsAttempts: sum.putts.puttsStatistics.puttsU2M.puttsAttempts + item.putts.puttsStatistics.puttsU2M.puttsAttempts,
            puttsAverage: sum.putts.puttsStatistics.puttsU2M.puttsAverage + item.putts.puttsStatistics.puttsU2M.puttsAverage,
            puttsAverageDistance: sum.putts.puttsStatistics.puttsU2M.puttsAverageDistance + item.putts.puttsStatistics.puttsU2M.puttsAverageDistance,
            puttsHoled: sum.putts.puttsStatistics.puttsU2M.puttsHoled + item.putts.puttsStatistics.puttsU2M.puttsHoled,
            puttsSecondAverageLength: sum.putts.puttsStatistics.puttsU2M.puttsSecondAverageLength + item.putts.puttsStatistics.puttsU2M.puttsSecondAverageLength,
          },
          putts24M: {
            distanceFirstPutt: sum.putts.puttsStatistics.putts24M.distanceFirstPutt + item.putts.puttsStatistics.putts24M.distanceFirstPutt,
            distanceSecondPutt: sum.putts.puttsStatistics.putts24M.distanceSecondPutt + item.putts.puttsStatistics.putts24M.distanceSecondPutt,
            numberPuttsInRange: sum.putts.puttsStatistics.putts24M.numberPuttsInRange + item.putts.puttsStatistics.putts24M.numberPuttsInRange,
            numberSecondPutt: sum.putts.puttsStatistics.putts24M.numberSecondPutt + item.putts.puttsStatistics.putts24M.numberSecondPutt,
            putt1Perc: sum.putts.puttsStatistics.putts24M.putt1Perc + item.putts.puttsStatistics.putts24M.putt1Perc,
            putt3Perc: sum.putts.puttsStatistics.putts24M.putt3Perc + item.putts.puttsStatistics.putts24M.putt3Perc,
            putts3: sum.putts.puttsStatistics.putts24M.putts3 + item.putts.puttsStatistics.putts24M.putts3,
            puttsAttempts: sum.putts.puttsStatistics.putts24M.puttsAttempts + item.putts.puttsStatistics.putts24M.puttsAttempts,
            puttsAverage: sum.putts.puttsStatistics.putts24M.puttsAverage + item.putts.puttsStatistics.putts24M.puttsAverage,
            puttsAverageDistance: sum.putts.puttsStatistics.putts24M.puttsAverageDistance + item.putts.puttsStatistics.putts24M.puttsAverageDistance,
            puttsHoled: sum.putts.puttsStatistics.putts24M.puttsHoled + item.putts.puttsStatistics.putts24M.puttsHoled,
            puttsSecondAverageLength: sum.putts.puttsStatistics.putts24M.puttsSecondAverageLength + item.putts.puttsStatistics.putts24M.puttsSecondAverageLength,
          },
          putts46M: {
            distanceFirstPutt: sum.putts.puttsStatistics.putts46M.distanceFirstPutt + item.putts.puttsStatistics.putts46M.distanceFirstPutt,
            distanceSecondPutt: sum.putts.puttsStatistics.putts46M.distanceSecondPutt + item.putts.puttsStatistics.putts46M.distanceSecondPutt,
            numberPuttsInRange: sum.putts.puttsStatistics.putts46M.numberPuttsInRange + item.putts.puttsStatistics.putts46M.numberPuttsInRange,
            numberSecondPutt: sum.putts.puttsStatistics.putts46M.numberSecondPutt + item.putts.puttsStatistics.putts46M.numberSecondPutt,
            putt1Perc: sum.putts.puttsStatistics.putts46M.putt1Perc + item.putts.puttsStatistics.putts46M.putt1Perc,
            putt3Perc: sum.putts.puttsStatistics.putts46M.putt3Perc + item.putts.puttsStatistics.putts46M.putt3Perc,
            putts3: sum.putts.puttsStatistics.putts46M.putts3 + item.putts.puttsStatistics.putts46M.putts3,
            puttsAttempts: sum.putts.puttsStatistics.putts46M.puttsAttempts + item.putts.puttsStatistics.putts46M.puttsAttempts,
            puttsAverage: sum.putts.puttsStatistics.putts46M.puttsAverage + item.putts.puttsStatistics.putts46M.puttsAverage,
            puttsAverageDistance: sum.putts.puttsStatistics.putts46M.puttsAverageDistance + item.putts.puttsStatistics.putts46M.puttsAverageDistance,
            puttsHoled: sum.putts.puttsStatistics.putts46M.puttsHoled + item.putts.puttsStatistics.putts46M.puttsHoled,
            puttsSecondAverageLength: sum.putts.puttsStatistics.putts46M.puttsSecondAverageLength + item.putts.puttsStatistics.putts46M.puttsSecondAverageLength,
          },
          putts610M: {
            distanceFirstPutt: sum.putts.puttsStatistics.putts610M.distanceFirstPutt + item.putts.puttsStatistics.putts610M.distanceFirstPutt,
            distanceSecondPutt: sum.putts.puttsStatistics.putts610M.distanceSecondPutt + item.putts.puttsStatistics.putts610M.distanceSecondPutt,
            numberPuttsInRange: sum.putts.puttsStatistics.putts610M.numberPuttsInRange + item.putts.puttsStatistics.putts610M.numberPuttsInRange,
            numberSecondPutt: sum.putts.puttsStatistics.putts610M.numberSecondPutt + item.putts.puttsStatistics.putts610M.numberSecondPutt,
            putt1Perc: sum.putts.puttsStatistics.putts610M.putt1Perc + item.putts.puttsStatistics.putts610M.putt1Perc,
            putt3Perc: sum.putts.puttsStatistics.putts610M.putt3Perc + item.putts.puttsStatistics.putts610M.putt3Perc,
            putts3: sum.putts.puttsStatistics.putts610M.putts3 + item.putts.puttsStatistics.putts610M.putts3,
            puttsAttempts: sum.putts.puttsStatistics.putts610M.puttsAttempts + item.putts.puttsStatistics.putts610M.puttsAttempts,
            puttsAverage: sum.putts.puttsStatistics.putts610M.puttsAverage + item.putts.puttsStatistics.putts610M.puttsAverage,
            puttsAverageDistance: sum.putts.puttsStatistics.putts610M.puttsAverageDistance + item.putts.puttsStatistics.putts610M.puttsAverageDistance,
            puttsHoled: sum.putts.puttsStatistics.putts610M.puttsHoled + item.putts.puttsStatistics.putts610M.puttsHoled,
            puttsSecondAverageLength: sum.putts.puttsStatistics.putts610M.puttsSecondAverageLength + item.putts.puttsStatistics.putts610M.puttsSecondAverageLength,
          },
          puttsO10M: {
            distanceFirstPutt: sum.putts.puttsStatistics.puttsO10M.distanceFirstPutt + item.putts.puttsStatistics.puttsO10M.distanceFirstPutt,
            distanceSecondPutt: sum.putts.puttsStatistics.puttsO10M.distanceSecondPutt + item.putts.puttsStatistics.puttsO10M.distanceSecondPutt,
            numberPuttsInRange: sum.putts.puttsStatistics.puttsO10M.numberPuttsInRange + item.putts.puttsStatistics.puttsO10M.numberPuttsInRange,
            numberSecondPutt: sum.putts.puttsStatistics.puttsO10M.numberSecondPutt + item.putts.puttsStatistics.puttsO10M.numberSecondPutt,
            putt1Perc: sum.putts.puttsStatistics.puttsO10M.putt1Perc + item.putts.puttsStatistics.puttsO10M.putt1Perc,
            putt3Perc: sum.putts.puttsStatistics.puttsO10M.putt3Perc + item.putts.puttsStatistics.puttsO10M.putt3Perc,
            putts3: sum.putts.puttsStatistics.puttsO10M.putts3 + item.putts.puttsStatistics.puttsO10M.putts3,
            puttsAttempts: sum.putts.puttsStatistics.puttsO10M.puttsAttempts + item.putts.puttsStatistics.puttsO10M.puttsAttempts,
            puttsAverage: sum.putts.puttsStatistics.puttsO10M.puttsAverage + item.putts.puttsStatistics.puttsO10M.puttsAverage,
            puttsAverageDistance: sum.putts.puttsStatistics.puttsO10M.puttsAverageDistance + item.putts.puttsStatistics.puttsO10M.puttsAverageDistance,
            puttsHoled: sum.putts.puttsStatistics.puttsO10M.puttsHoled + item.putts.puttsStatistics.puttsO10M.puttsHoled,
            puttsSecondAverageLength: sum.putts.puttsStatistics.puttsO10M.puttsSecondAverageLength + item.putts.puttsStatistics.puttsO10M.puttsSecondAverageLength,
          },
          _puttsOverall: {
            birdieBetter: sum.putts.puttsStatistics._puttsOverall.birdieBetter + item.putts.puttsStatistics._puttsOverall.birdieBetter,
            birdieConversion: sum.putts.puttsStatistics._puttsOverall.birdieConversion + item.putts.puttsStatistics._puttsOverall.birdieConversion,
            gir: sum.putts.puttsStatistics._puttsOverall.gir + item.putts.puttsStatistics._puttsOverall.gir,
            puttsInGIR: sum.putts.puttsStatistics._puttsOverall.puttsInGIR + item.putts.puttsStatistics._puttsOverall.puttsInGIR,
            threePutts: sum.putts.puttsStatistics._puttsOverall.threePutts + item.putts.puttsStatistics._puttsOverall.threePutts,
            totalPutts: sum.putts.puttsStatistics._puttsOverall.totalPutts + item.putts.puttsStatistics._puttsOverall.totalPutts,
            totalPuttsInGIR: sum.putts.puttsStatistics._puttsOverall.totalPuttsInGIR + item.putts.puttsStatistics._puttsOverall.totalPuttsInGIR,
          }
        },
      },
      sand: {
        totals: sum.sand.totals + item.sand.totals,
        avg: Number(sum.sand.avg) + Number(item.sand.avg),
        saved: sum.sand.saved + item.sand.saved,
        avgSaved: Number(sum.sand.avgSaved) + Number(item.sand.avgSaved),
        savedPerc: sum.sand.savedPerc + item.sand.savedPerc,
      },
      water: {
        totals: sum.water.totals + item.water.totals,
        avg: Number(sum.water.avg) + Number(item.water.avg),
        totalsIN: sum.water.totals + item.water.totals,
        avgIN: Number(sum.water.avg) + Number(item.water.avg),
        totalsOUT: sum.water.totals + item.water.totals,
        avgOUT: Number(sum.water.avg) + Number(item.water.avg),
      },
      out: {
        totals: sum.out.totals + item.out.totals,
        avg: Number(sum.out.avg) + Number(item.out.avg),
        totalsIN: sum.out.totalsIN + item.out.totalsIN,
        avgIN: Number(sum.out.avgIN) + Number(item.out.avgIN),
        totalsOUT: sum.out.totalsOUT + item.out.totalsOUT,
        avgOUT: Number(sum.out.avgOUT) + Number(item.out.avgOUT),
      }
    };
  }, {
    score: {
      totals: 0,
      avg: 0,
      vsPar: 0,
      scoreIN: 0,
      scoreOUT: 0,
      vsParIN: 0,
      vsParOUT: 0,
      avgIN: 0,
      avgOUT: 0,
      par3: 0,
      par4: 0,
      par5: 0,
      scoreEagleBetter: 0,
      scoreBirdie: 0,
      scorePar: 0,
      scoreBogey: 0,
      scoreDoubleBogeyWorst: 0,
      scorePar3: 0,
      scorePar4: 0,
      scorePar5: 0,
    },
    points: {
      totals: 0,
      avg: 0,
      pointsIN: 0,
      pointsOUT: 0,
      avgIN: 0,
      avgOUT: 0,
    },
    fairway: {
      total: 0,
      fairwayCenter: 0,
      fairwayLeft: 0,
      fairwayRight: 0,
    },
    teeShots: {
      teeDriver: {
        fairwayHits: 0,
        attempts: 0,
        averageDistance: 0,
        missLeft: 0,
        missRight: 0,
        noGreen: 0,
        fairwayCenterPCT: 0,
        fairwayLeftPCT: 0,
        fairwayRightPCT: 0,
      },
      teeFW: {
        fairwayHits: 0,
        attempts: 0,
        averageDistance: 0,
        missLeft: 0,
        missRight: 0,
        noGreen: 0,
        fairwayCenterPCT: 0,
        fairwayLeftPCT: 0,
        fairwayRightPCT: 0,
      },
      teeHY: {
        fairwayHits: 0,
        attempts: 0,
        averageDistance: 0,
        missLeft: 0,
        missRight: 0,
        noGreen: 0,
        fairwayCenterPCT: 0,
        fairwayLeftPCT: 0,
        fairwayRightPCT: 0,
      },
      teeIron: {
        fairwayHits: 0,
        attempts: 0,
        averageDistance: 0,
        missLeft: 0,
        missRight: 0,
        noGreen: 0,
        fairwayCenterPCT: 0,
        fairwayLeftPCT: 0,
        fairwayRightPCT: 0,
      },
    },
    chipPitch: {
      pw: {
        upDownMade: 0,
        attempts: 0,
        averageShot: 0,
        averageHoleDistance: 0,
        shotsHoled: 0,
        greensMissed: 0,
      },
      gw: {
        upDownMade: 0,
        attempts: 0,
        averageShot: 0,
        averageHoleDistance: 0,
        shotsHoled: 0,
        greensMissed: 0,
      },
      sw: {
        upDownMade: 0,
        attempts: 0,
        averageShot: 0,
        averageHoleDistance: 0,
        shotsHoled: 0,
        greensMissed: 0,
      },
      lw: {
        upDownMade: 0,
        attempts: 0,
        averageShot: 0,
        averageHoleDistance: 0,
        shotsHoled: 0,
        greensMissed: 0,
      },
      b: {
        upDownMade: 0,
        attempts: 0,
        averageShot: 0,
        averageHoleDistance: 0,
        shotsHoled: 0,
        greensMissed: 0,
      },
      chip: {
        upDownMade: 0,
        attempts: 0,
        averageShot: 0,
        averageHoleDistance: 0,
        shotsHoled: 0,
        greensMissed: 0,
      },
      putt: {
        upDownMade: 0,
        attempts: 0,
        averageShot: 0,
        averageHoleDistance: 0,
        shotsHoled: 0,
        greensMissed: 0,
      },
    },
    inside100Mt: {
      over100mt: {
        greensHits: 0,
        attempts: 0,
        averageShots: 0,
        averageDistGIR: 0,
        missedLeft: 0,
        missedRight: 0,
        missedShort: 0,
        missedLong: 0
      },
      inside10081: {
        greensHits: 0,
        attempts: 0,
        averageShots: 0,
        averageDistGIR: 0,
        missedLeft: 0,
        missedRight: 0,
        missedShort: 0,
        missedLong: 0
      },
      inside8061: {
        greensHits: 0,
        attempts: 0,
        averageShots: 0,
        averageDistGIR: 0,
        missedLeft: 0,
        missedRight: 0,
        missedShort: 0,
        missedLong: 0
      },
      inside60: {
        greensHits: 0,
        attempts: 0,
        averageShots: 0,
        averageDistGIR: 0,
        missedLeft: 0,
        missedRight: 0,
        missedShort: 0,
        missedLong: 0
      },
    },
    fwAndIrons: {
      fwHy: {
        greenHits: 0,
        attempts: 0,
        totalScorePar3: 0,
        totalScorePar4: 0,
        totalNumberPar4: 0,
        totalScorePar5: 0,
        totalNumberPar5: 0,
        totalDistanceGIR: 0,
        totalGirGir2Made: 0,
        missedLeft: 0,
        missedRight: 0,
        missedShort: 0,
        missedOver: 0,
        averageShots: 0,
        averageDistGIR: 0,
      },
      longIrons: {
        greenHits: 0,
        attempts: 0,
        totalScorePar3: 0,
        totalScorePar4: 0,
        totalNumberPar4: 0,
        totalScorePar5: 0,
        totalNumberPar5: 0,
        totalDistanceGIR: 0,
        totalGirGir2Made: 0,
        missedLeft: 0,
        missedRight: 0,
        missedShort: 0,
        missedOver: 0,
        averageShots: 0,
        averageDistGIR: 0,
      },
      shortIrons: {
        greenHits: 0,
        attempts: 0,
        totalScorePar3: 0,
        totalScorePar4: 0,
        totalNumberPar4: 0,
        totalScorePar5: 0,
        totalNumberPar5: 0,
        totalDistanceGIR: 0,
        totalGirGir2Made: 0,
        missedLeft: 0,
        missedRight: 0,
        missedShort: 0,
        missedOver: 0,
        averageShots: 0,
        averageDistGIR: 0,
      },
    },
    gir: {
      totals: 0,
      avg: 0,
      totalsIN: 0,
      avgIN: 0,
      totalsOUT: 0,
      avgOUT: 0,
    },
    girBogey: {
      totals: 0,
      avg: 0,
      totalsIN: 0,
      avgIN: 0,
      totalsOUT: 0,
      avgOUT: 0,
    },
    upDown: {
      totals: 0,
      saved: 0,
      perc: 0,
    },
    scramble: {
      totals: 0,
      saved: 0,
      perc: 0,
    },
    putts: {
      totals: 0,
      avg: 0,
      totalsIN: 0,
      avgIN: 0,
      totalsOUT: 0,
      avgOUT: 0,
      puttsGir: 0,
      puttsGirIn: 0,
      puttsGirOut: 0,
      puttsThree: 0,
      putts1: 0,
      putts2: 0,
      putts3More: 0,
      puttsDistGir: 0,
      puttsStatistics: {
        _puttsOverall: {
          birdieBetter: 0,
          birdieConversion: 0,
          gir: 0,
          puttsInGIR: 0,
          threePutts: 0,
          totalPutts: 0,
          totalPuttsInGIR: 0,
        },
        puttsU2M: {
          distanceFirstPutt: 0,
          distanceSecondPutt: 0,
          numberPuttsInRange: 0,
          numberSecondPutt: 0,
          putt1Perc: 0,
          putt3Perc: 0,
          putts3: 0,
          puttsAttempts: 0,
          puttsAverage: 0,
          puttsAverageDistance: 0,
          puttsHoled: 0,
          puttsSecondAverageLength: 0,
        },
        putts24M: {
          distanceFirstPutt: 0,
          distanceSecondPutt: 0,
          numberPuttsInRange: 0,
          numberSecondPutt: 0,
          putt1Perc: 0,
          putt3Perc: 0,
          putts3: 0,
          puttsAttempts: 0,
          puttsAverage: 0,
          puttsAverageDistance: 0,
          puttsHoled: 0,
          puttsSecondAverageLength: 0,
        },
        putts46M: {
          distanceFirstPutt: 0,
          distanceSecondPutt: 0,
          numberPuttsInRange: 0,
          numberSecondPutt: 0,
          putt1Perc: 0,
          putt3Perc: 0,
          putts3: 0,
          puttsAttempts: 0,
          puttsAverage: 0,
          puttsAverageDistance: 0,
          puttsHoled: 0,
          puttsSecondAverageLength: 0,
        },
        putts610M: {
          distanceFirstPutt: 0,
          distanceSecondPutt: 0,
          numberPuttsInRange: 0,
          numberSecondPutt: 0,
          putt1Perc: 0,
          putt3Perc: 0,
          putts3: 0,
          puttsAttempts: 0,
          puttsAverage: 0,
          puttsAverageDistance: 0,
          puttsHoled: 0,
          puttsSecondAverageLength: 0,
        },
        puttsO10M: {
          distanceFirstPutt: 0,
          distanceSecondPutt: 0,
          numberPuttsInRange: 0,
          numberSecondPutt: 0,
          putt1Perc: 0,
          putt3Perc: 0,
          putts3: 0,
          puttsAttempts: 0,
          puttsAverage: 0,
          puttsAverageDistance: 0,
          puttsHoled: 0,
          puttsSecondAverageLength: 0,
        },
      },
    },
    sand: {
      totals: 0,
      avg: 0,
      saved: 0,
      avgSaved: 0,
      savedPerc: 0,
    },
    water: {
      totals: 0,
      avg: 0,
      totalsIN: 0,
      avgIN: 0,
      totalsOUT: 0,
      avgOUT: 0,
    },
    out: {
      totals: 0,
      avg: 0,
      totalsIN: 0,
      avgIN: 0,
      totalsOUT: 0,
      avgOUT: 0,
    },
  });

  const finalTotals = {
    playerID: '',
    mainData: {
      roundCourse: '',
      roundDate: '',
      roundNumber: 0,
      roundTee: '',
      coursePar: 0,
      playerHCP: 0
    },
    score: {
      totals: Number(divide(totalScores.score.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.score.avg), totalsRounds).toFixed(2)),
      vsPar: Number(divide(totalScores.score.vsPar, totalsRounds).toFixed(2)),
      scoreIN: Number(divide(totalScores.score.scoreIN, totalsRounds).toFixed(2)),
      scoreOUT: Number(divide(totalScores.score.scoreOUT, totalsRounds).toFixed(2)),
      vsParIN: Number(divide(totalScores.score.vsParIN, totalsRounds).toFixed(2)),
      vsParOUT: Number(divide(totalScores.score.vsParOUT, totalsRounds).toFixed(2)),
      avgIN: Number(divide(Number(totalScores.score.avgIN), totalsRounds).toFixed(2)),
      avgOUT: Number(divide(Number(totalScores.score.avgOUT), totalsRounds).toFixed(2)),
      par3: Number(divide(totalScores.score.par3, totalsRounds).toFixed(2)),
      par4: Number(divide(totalScores.score.par4, totalsRounds).toFixed(2)),
      par5: Number(divide(totalScores.score.par5, totalsRounds).toFixed(2)),
      scoreEagleBetter: Number(divide(totalScores.score.scoreEagleBetter, totalsRounds).toFixed(2)),
      scoreBirdie: Number(divide(totalScores.score.scoreBirdie, totalsRounds).toFixed(2)),
      scorePar: Number(divide(totalScores.score.scorePar, totalsRounds).toFixed(2)),
      scoreBogey: Number(divide(totalScores.score.scoreBogey, totalsRounds).toFixed(2)),
      scoreDoubleBogeyWorst: Number(divide(totalScores.score.scoreDoubleBogeyWorst, totalsRounds).toFixed(2)),
      scorePar3: Number(divide(totalScores.score.scorePar3, totalsRounds).toFixed(2)),
      scorePar4: Number(divide(totalScores.score.scorePar4, totalsRounds).toFixed(2)),
      scorePar5: Number(divide(totalScores.score.scorePar5, totalsRounds).toFixed(2)),
    },
    points: {
      totals: Number(divide(totalScores.points.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.points.avg), totalsRounds).toFixed(2)),
      pointsIN: Number(divide(totalScores.points.pointsIN, totalsRounds).toFixed(2)),
      pointsOUT: Number(divide(totalScores.points.pointsOUT, totalsRounds).toFixed(2)),
      avgIN: Number(divide(Number(totalScores.points.avgIN), totalsRounds).toFixed(2)),
      avgOUT: Number(divide(Number(totalScores.points.avgOUT), totalsRounds).toFixed(2)),
    },
    fairway: {
      total: Number(divide(totalScores.points.totals, totalsRounds).toFixed(2)),
      fairwayCenter: Number(divide(totalScores.points.totals, totalsRounds).toFixed(2)),
      fairwayLeft: Number(divide(totalScores.points.totals, totalsRounds).toFixed(2)),
      fairwayRight: Number(divide(totalScores.points.totals, totalsRounds).toFixed(2)),
    },
    teeShots: {
      teeDriver: {
        fairwayHits: Number(divide(totalScores.teeShots.teeDriver.fairwayHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.teeShots.teeDriver.attempts, totalsRounds).toFixed(2)),
        averageDistance: Number(divide(totalScores.teeShots.teeDriver.averageDistance, totalsRounds).toFixed(2)),
        missLeft: Number(divide(totalScores.teeShots.teeDriver.missLeft, totalsRounds).toFixed(2)),
        missRight: Number(divide(totalScores.teeShots.teeDriver.missRight, totalsRounds).toFixed(2)),
        noGreen: Number(divide(totalScores.teeShots.teeDriver.noGreen, totalsRounds).toFixed(2)),
        fairwayCenterPCT: Number(divide(totalScores.teeShots.teeDriver.fairwayCenterPCT, totalsRounds).toFixed(2)),
        fairwayLeftPCT: Number(divide(totalScores.teeShots.teeDriver.fairwayLeftPCT, totalsRounds).toFixed(2)),
        fairwayRightPCT: Number(divide(totalScores.teeShots.teeDriver.fairwayRightPCT, totalsRounds).toFixed(2)),
      },
      teeFW: {
        fairwayHits: Number(divide(totalScores.teeShots.teeFW.fairwayHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.teeShots.teeFW.attempts, totalsRounds).toFixed(2)),
        averageDistance: Number(divide(totalScores.teeShots.teeFW.averageDistance, totalsRounds).toFixed(2)),
        missLeft: Number(divide(totalScores.teeShots.teeFW.missLeft, totalsRounds).toFixed(2)),
        missRight: Number(divide(totalScores.teeShots.teeFW.missRight, totalsRounds).toFixed(2)),
        noGreen: Number(divide(totalScores.teeShots.teeFW.noGreen, totalsRounds).toFixed(2)),
        fairwayCenterPCT: Number(divide(totalScores.teeShots.teeFW.fairwayCenterPCT, totalsRounds).toFixed(2)),
        fairwayLeftPCT: Number(divide(totalScores.teeShots.teeFW.fairwayLeftPCT, totalsRounds).toFixed(2)),
        fairwayRightPCT: Number(divide(totalScores.teeShots.teeFW.fairwayRightPCT, totalsRounds).toFixed(2)),
      },
      teeHY: {
        fairwayHits: Number(divide(totalScores.teeShots.teeHY.fairwayHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.teeShots.teeHY.attempts, totalsRounds).toFixed(2)),
        averageDistance: Number(divide(totalScores.teeShots.teeHY.averageDistance, totalsRounds).toFixed(2)),
        missLeft: Number(divide(totalScores.teeShots.teeHY.missLeft, totalsRounds).toFixed(2)),
        missRight: Number(divide(totalScores.teeShots.teeHY.missRight, totalsRounds).toFixed(2)),
        noGreen: Number(divide(totalScores.teeShots.teeHY.noGreen, totalsRounds).toFixed(2)),
        fairwayCenterPCT: Number(divide(totalScores.teeShots.teeHY.fairwayCenterPCT, totalsRounds).toFixed(2)),
        fairwayLeftPCT: Number(divide(totalScores.teeShots.teeHY.fairwayLeftPCT, totalsRounds).toFixed(2)),
        fairwayRightPCT: Number(divide(totalScores.teeShots.teeHY.fairwayRightPCT, totalsRounds).toFixed(2)),
      },
      teeIron: {
        fairwayHits: Number(divide(totalScores.teeShots.teeIron.fairwayHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.teeShots.teeIron.attempts, totalsRounds).toFixed(2)),
        averageDistance: Number(divide(totalScores.teeShots.teeIron.averageDistance, totalsRounds).toFixed(2)),
        missLeft: Number(divide(totalScores.teeShots.teeIron.missLeft, totalsRounds).toFixed(2)),
        missRight: Number(divide(totalScores.teeShots.teeIron.missRight, totalsRounds).toFixed(2)),
        noGreen: Number(divide(totalScores.teeShots.teeIron.noGreen, totalsRounds).toFixed(2)),
        fairwayCenterPCT: Number(divide(totalScores.teeShots.teeIron.fairwayCenterPCT, totalsRounds).toFixed(2)),
        fairwayLeftPCT: Number(divide(totalScores.teeShots.teeIron.fairwayLeftPCT, totalsRounds).toFixed(2)),
        fairwayRightPCT: Number(divide(totalScores.teeShots.teeIron.fairwayRightPCT, totalsRounds).toFixed(2)),
      },
    },
    chipPitch: {
      pw: {
        upDownMade: Number(divide(totalScores.chipPitch.pw.upDownMade, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.chipPitch.pw.attempts, totalsRounds).toFixed(2)),
        averageShot: Number(divide(totalScores.chipPitch.pw.averageShot, totalsRounds).toFixed(2)),
        averageHoleDistance: Number(divide(totalScores.chipPitch.pw.averageHoleDistance, totalsRounds).toFixed(2)),
        shotsHoled: Number(divide(totalScores.chipPitch.pw.shotsHoled, totalsRounds).toFixed(2)),
        greensMissed: Number(divide(totalScores.chipPitch.pw.greensMissed, totalsRounds).toFixed(2)),
      },
      gw: {
        upDownMade: Number(divide(totalScores.chipPitch.gw.upDownMade, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.chipPitch.gw.attempts, totalsRounds).toFixed(2)),
        averageShot: Number(divide(totalScores.chipPitch.gw.averageShot, totalsRounds).toFixed(2)),
        averageHoleDistance: Number(divide(totalScores.chipPitch.gw.averageHoleDistance, totalsRounds).toFixed(2)),
        shotsHoled: Number(divide(totalScores.chipPitch.gw.shotsHoled, totalsRounds).toFixed(2)),
        greensMissed: Number(divide(totalScores.chipPitch.gw.greensMissed, totalsRounds).toFixed(2)),
      },
      sw: {
        upDownMade: Number(divide(totalScores.chipPitch.sw.upDownMade, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.chipPitch.sw.attempts, totalsRounds).toFixed(2)),
        averageShot: Number(divide(totalScores.chipPitch.sw.averageShot, totalsRounds).toFixed(2)),
        averageHoleDistance: Number(divide(totalScores.chipPitch.sw.averageHoleDistance, totalsRounds).toFixed(2)),
        shotsHoled: Number(divide(totalScores.chipPitch.sw.shotsHoled, totalsRounds).toFixed(2)),
        greensMissed: Number(divide(totalScores.chipPitch.sw.greensMissed, totalsRounds).toFixed(2)),
      },
      lw: {
        upDownMade: Number(divide(totalScores.chipPitch.lw.upDownMade, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.chipPitch.lw.attempts, totalsRounds).toFixed(2)),
        averageShot: Number(divide(totalScores.chipPitch.lw.averageShot, totalsRounds).toFixed(2)),
        averageHoleDistance: Number(divide(totalScores.chipPitch.lw.averageHoleDistance, totalsRounds).toFixed(2)),
        shotsHoled: Number(divide(totalScores.chipPitch.lw.shotsHoled, totalsRounds).toFixed(2)),
        greensMissed: Number(divide(totalScores.chipPitch.lw.greensMissed, totalsRounds).toFixed(2)),
      },
      b: {
        upDownMade: Number(divide(totalScores.chipPitch.b.upDownMade, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.chipPitch.b.attempts, totalsRounds).toFixed(2)),
        averageShot: Number(divide(totalScores.chipPitch.b.averageShot, totalsRounds).toFixed(2)),
        averageHoleDistance: Number(divide(totalScores.chipPitch.b.averageHoleDistance, totalsRounds).toFixed(2)),
        shotsHoled: Number(divide(totalScores.chipPitch.b.shotsHoled, totalsRounds).toFixed(2)),
        greensMissed: Number(divide(totalScores.chipPitch.b.greensMissed, totalsRounds).toFixed(2)),
      },
      chip: {
        upDownMade: Number(divide(totalScores.chipPitch.chip.upDownMade, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.chipPitch.chip.attempts, totalsRounds).toFixed(2)),
        averageShot: Number(divide(totalScores.chipPitch.chip.averageShot, totalsRounds).toFixed(2)),
        averageHoleDistance: Number(divide(totalScores.chipPitch.chip.averageHoleDistance, totalsRounds).toFixed(2)),
        shotsHoled: Number(divide(totalScores.chipPitch.chip.shotsHoled, totalsRounds).toFixed(2)),
        greensMissed: Number(divide(totalScores.chipPitch.chip.greensMissed, totalsRounds).toFixed(2)),
      },
      putt: {
        upDownMade: Number(divide(totalScores.chipPitch.putt.upDownMade, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.chipPitch.putt.attempts, totalsRounds).toFixed(2)),
        averageShot: Number(divide(totalScores.chipPitch.putt.averageShot, totalsRounds).toFixed(2)),
        averageHoleDistance: Number(divide(totalScores.chipPitch.putt.averageHoleDistance, totalsRounds).toFixed(2)),
        shotsHoled: Number(divide(totalScores.chipPitch.putt.shotsHoled, totalsRounds).toFixed(2)),
        greensMissed: Number(divide(totalScores.chipPitch.putt.greensMissed, totalsRounds).toFixed(2)),
      },
    },
    inside100Mt: {
      over100mt: {
        greensHits: Number(divide(totalScores.inside100Mt.over100mt.greensHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.inside100Mt.over100mt.attempts, totalsRounds).toFixed(2)),
        averageShots: Number(divide(totalScores.inside100Mt.over100mt.averageShots, totalsRounds).toFixed(2)),
        averageDistGIR: Number(divide(totalScores.inside100Mt.over100mt.averageDistGIR, totalsRounds).toFixed(2)),
        missedLeft: Number(divide(totalScores.inside100Mt.over100mt.missedLeft, totalsRounds).toFixed(2)),
        missedRight: Number(divide(totalScores.inside100Mt.over100mt.missedRight, totalsRounds).toFixed(2)),
        missedShort: Number(divide(totalScores.inside100Mt.over100mt.missedShort, totalsRounds).toFixed(2)),
        missedLong: Number(divide(totalScores.inside100Mt.over100mt.missedLong, totalsRounds).toFixed(2)),
      },
      inside10081: {
        greensHits: Number(divide(totalScores.inside100Mt.inside10081.greensHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.inside100Mt.inside10081.attempts, totalsRounds).toFixed(2)),
        averageShots: Number(divide(totalScores.inside100Mt.inside10081.averageShots, totalsRounds).toFixed(2)),
        averageDistGIR: Number(divide(totalScores.inside100Mt.inside10081.averageDistGIR, totalsRounds).toFixed(2)),
        missedLeft: Number(divide(totalScores.inside100Mt.inside10081.missedLeft, totalsRounds).toFixed(2)),
        missedRight: Number(divide(totalScores.inside100Mt.inside10081.missedRight, totalsRounds).toFixed(2)),
        missedShort: Number(divide(totalScores.inside100Mt.inside10081.missedShort, totalsRounds).toFixed(2)),
        missedLong: Number(divide(totalScores.inside100Mt.inside10081.missedLong, totalsRounds).toFixed(2)),
      },
      inside8061: {
        greensHits: Number(divide(totalScores.inside100Mt.inside8061.greensHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.inside100Mt.inside8061.attempts, totalsRounds).toFixed(2)),
        averageShots: Number(divide(totalScores.inside100Mt.inside8061.averageShots, totalsRounds).toFixed(2)),
        averageDistGIR: Number(divide(totalScores.inside100Mt.inside8061.averageDistGIR, totalsRounds).toFixed(2)),
        missedLeft: Number(divide(totalScores.inside100Mt.inside8061.missedLeft, totalsRounds).toFixed(2)),
        missedRight: Number(divide(totalScores.inside100Mt.inside8061.missedRight, totalsRounds).toFixed(2)),
        missedShort: Number(divide(totalScores.inside100Mt.inside8061.missedShort, totalsRounds).toFixed(2)),
        missedLong: Number(divide(totalScores.inside100Mt.inside8061.missedLong, totalsRounds).toFixed(2)),
      },
      inside60: {
        greensHits: Number(divide(totalScores.inside100Mt.inside60.greensHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.inside100Mt.inside60.attempts, totalsRounds).toFixed(2)),
        averageShots: Number(divide(totalScores.inside100Mt.inside60.averageShots, totalsRounds).toFixed(2)),
        averageDistGIR: Number(divide(totalScores.inside100Mt.inside60.averageDistGIR, totalsRounds).toFixed(2)),
        missedLeft: Number(divide(totalScores.inside100Mt.inside60.missedLeft, totalsRounds).toFixed(2)),
        missedRight: Number(divide(totalScores.inside100Mt.inside60.missedRight, totalsRounds).toFixed(2)),
        missedShort: Number(divide(totalScores.inside100Mt.inside60.missedShort, totalsRounds).toFixed(2)),
        missedLong: Number(divide(totalScores.inside100Mt.inside60.missedLong, totalsRounds).toFixed(2)),
      },
    },
    fwAndIrons: {
      fwHy: {
        greenHits: Number(divide(totalScores.fwAndIrons.fwHy.greenHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.fwAndIrons.fwHy.attempts, totalsRounds).toFixed(2)),
        totalScorePar3: Number(divide(totalScores.fwAndIrons.fwHy.totalScorePar3, totalsRounds).toFixed(2)),
        totalScorePar4: Number(divide(totalScores.fwAndIrons.fwHy.totalScorePar4, totalsRounds).toFixed(2)),
        totalNumberPar4: Number(divide(totalScores.fwAndIrons.fwHy.totalNumberPar4, totalsRounds).toFixed(2)),
        totalScorePar5: Number(divide(totalScores.fwAndIrons.fwHy.totalScorePar5, totalsRounds).toFixed(2)),
        totalNumberPar5: Number(divide(totalScores.fwAndIrons.fwHy.totalNumberPar5, totalsRounds).toFixed(2)),
        totalDistanceGIR: Number(divide(totalScores.fwAndIrons.fwHy.totalDistanceGIR, totalsRounds).toFixed(2)),
        totalGirGir2Made: Number(divide(totalScores.fwAndIrons.fwHy.totalGirGir2Made, totalsRounds).toFixed(2)),
        missedLeft: Number(divide(totalScores.fwAndIrons.fwHy.missedLeft, totalsRounds).toFixed(2)),
        missedRight: Number(divide(totalScores.fwAndIrons.fwHy.missedRight, totalsRounds).toFixed(2)),
        missedShort: Number(divide(totalScores.fwAndIrons.fwHy.missedShort, totalsRounds).toFixed(2)),
        missedOver: Number(divide(totalScores.fwAndIrons.fwHy.missedOver, totalsRounds).toFixed(2)),
        averageShots: Number(divide(totalScores.fwAndIrons.fwHy.averageShots, totalsRounds).toFixed(2)),
        averageDistGIR: Number(divide(totalScores.fwAndIrons.fwHy.averageDistGIR, totalsRounds).toFixed(2)),
      },
      longIrons: {
        greenHits: Number(divide(totalScores.fwAndIrons.longIrons.greenHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.fwAndIrons.longIrons.attempts, totalsRounds).toFixed(2)),
        totalScorePar3: Number(divide(totalScores.fwAndIrons.longIrons.totalScorePar3, totalsRounds).toFixed(2)),
        totalScorePar4: Number(divide(totalScores.fwAndIrons.longIrons.totalScorePar4, totalsRounds).toFixed(2)),
        totalNumberPar4: Number(divide(totalScores.fwAndIrons.longIrons.totalNumberPar4, totalsRounds).toFixed(2)),
        totalScorePar5: Number(divide(totalScores.fwAndIrons.longIrons.totalScorePar5, totalsRounds).toFixed(2)),
        totalNumberPar5: Number(divide(totalScores.fwAndIrons.longIrons.totalNumberPar5, totalsRounds).toFixed(2)),
        totalDistanceGIR: Number(divide(totalScores.fwAndIrons.longIrons.totalDistanceGIR, totalsRounds).toFixed(2)),
        totalGirGir2Made: Number(divide(totalScores.fwAndIrons.longIrons.totalGirGir2Made, totalsRounds).toFixed(2)),
        missedLeft: Number(divide(totalScores.fwAndIrons.longIrons.missedLeft, totalsRounds).toFixed(2)),
        missedRight: Number(divide(totalScores.fwAndIrons.longIrons.missedRight, totalsRounds).toFixed(2)),
        missedShort: Number(divide(totalScores.fwAndIrons.longIrons.missedShort, totalsRounds).toFixed(2)),
        missedOver: Number(divide(totalScores.fwAndIrons.longIrons.missedOver, totalsRounds).toFixed(2)),
        averageShots: Number(divide(totalScores.fwAndIrons.longIrons.averageShots, totalsRounds).toFixed(2)),
        averageDistGIR: Number(divide(totalScores.fwAndIrons.longIrons.averageDistGIR, totalsRounds).toFixed(2)),
      },
      shortIrons: {
        greenHits: Number(divide(totalScores.fwAndIrons.shortIrons.greenHits, totalsRounds).toFixed(2)),
        attempts: Number(divide(totalScores.fwAndIrons.shortIrons.attempts, totalsRounds).toFixed(2)),
        totalScorePar3: Number(divide(totalScores.fwAndIrons.shortIrons.totalScorePar3, totalsRounds).toFixed(2)),
        totalScorePar4: Number(divide(totalScores.fwAndIrons.shortIrons.totalScorePar4, totalsRounds).toFixed(2)),
        totalNumberPar4: Number(divide(totalScores.fwAndIrons.shortIrons.totalNumberPar4, totalsRounds).toFixed(2)),
        totalScorePar5: Number(divide(totalScores.fwAndIrons.shortIrons.totalScorePar5, totalsRounds).toFixed(2)),
        totalNumberPar5: Number(divide(totalScores.fwAndIrons.shortIrons.totalNumberPar5, totalsRounds).toFixed(2)),
        totalDistanceGIR: Number(divide(totalScores.fwAndIrons.shortIrons.totalDistanceGIR, totalsRounds).toFixed(2)),
        totalGirGir2Made: Number(divide(totalScores.fwAndIrons.shortIrons.totalGirGir2Made, totalsRounds).toFixed(2)),
        missedLeft: Number(divide(totalScores.fwAndIrons.shortIrons.missedLeft, totalsRounds).toFixed(2)),
        missedRight: Number(divide(totalScores.fwAndIrons.shortIrons.missedRight, totalsRounds).toFixed(2)),
        missedShort: Number(divide(totalScores.fwAndIrons.shortIrons.missedShort, totalsRounds).toFixed(2)),
        missedOver: Number(divide(totalScores.fwAndIrons.shortIrons.missedOver, totalsRounds).toFixed(2)),
        averageShots: Number(divide(totalScores.fwAndIrons.shortIrons.averageShots, totalsRounds).toFixed(2)),
        averageDistGIR: Number(divide(totalScores.fwAndIrons.shortIrons.averageDistGIR, totalsRounds).toFixed(2)),
      },
    },
    gir: {
      totals: Number(divide(totalScores.gir.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.gir.avg), totalsRounds).toFixed(2)),
      totalsIN: Number(divide(totalScores.gir.totalsIN, totalsRounds).toFixed(2)),
      avgIN: Number(divide(Number(totalScores.gir.avgIN), totalsRounds).toFixed(2)),
      totalsOUT: Number(divide(totalScores.gir.totalsOUT, totalsRounds).toFixed(2)),
      avgOUT: Number(divide(Number(totalScores.gir.avgOUT), totalsRounds).toFixed(2)),
    },
    girBogey: {
      totals: Number(divide(totalScores.gir.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.gir.avg), totalsRounds).toFixed(2)),
      totalsIN: Number(divide(totalScores.gir.totalsIN, totalsRounds).toFixed(2)),
      avgIN: Number(divide(Number(totalScores.gir.avgIN), totalsRounds).toFixed(2)),
      totalsOUT: Number(divide(totalScores.gir.totalsOUT, totalsRounds).toFixed(2)),
      avgOUT: Number(divide(Number(totalScores.gir.avgOUT), totalsRounds).toFixed(2)),
    },
    upDown: {
      totals: Number(divide(totalScores.upDown.totals, totalsRounds).toFixed(2)),
      saved: Number(divide(totalScores.upDown.saved, totalsRounds).toFixed(2)),
      perc: Number(divide(totalScores.upDown.perc, totalsRounds).toFixed(2)),
    },
    scramble: {
      totals: Number(divide(totalScores.scramble.totals, totalsRounds).toFixed(2)),
      saved: Number(divide(totalScores.scramble.saved, totalsRounds).toFixed(2)),
      perc: Number(divide(totalScores.scramble.perc, totalsRounds).toFixed(2)),
    },
    putts: {
      totals: Number(divide(totalScores.putts.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.putts.avg), totalsRounds).toFixed(2)),
      totalsIN: Number(divide(totalScores.putts.totalsIN, totalsRounds).toFixed(2)),
      avgIN: Number(divide(Number(totalScores.putts.avgIN), totalsRounds).toFixed(2)),
      totalsOUT: Number(divide(totalScores.putts.totalsOUT, totalsRounds).toFixed(2)),
      avgOUT: Number(divide(Number(totalScores.putts.avgOUT), totalsRounds).toFixed(2)),
      puttsGir: Number(divide(totalScores.putts.puttsGir, totalsRounds).toFixed(2)),
      puttsGirIn: Number(divide(totalScores.putts.puttsGirIn, totalsRounds).toFixed(2)),
      puttsGirOut: Number(divide(totalScores.putts.puttsGirOut, totalsRounds).toFixed(2)),
      puttsThree: Number(divide(totalScores.putts.puttsThree, totalsRounds).toFixed(2)),
      putts1: Number(divide(totalScores.putts.putts1, totalsRounds).toFixed(2)),
      putts2: Number(divide(totalScores.putts.putts2, totalsRounds).toFixed(2)),
      putts3More: Number(divide(totalScores.putts.putts3More, totalsRounds).toFixed(2)),
      puttsDistGir: Number(divide(totalScores.putts.puttsDistGir, totalsRounds).toFixed(2)),
      puttsStatistics: {
        puttsU2M: {
          distanceFirstPutt: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.distanceFirstPutt, totalsRounds).toFixed(2)),
          distanceSecondPutt: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.distanceSecondPutt, totalsRounds).toFixed(2)),
          numberPuttsInRange: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.numberPuttsInRange, totalsRounds).toFixed(2)),
          numberSecondPutt: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.numberSecondPutt, totalsRounds).toFixed(2)),
          putt1Perc: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.putt1Perc, totalsRounds).toFixed(2)),
          putt3Perc: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.putt3Perc, totalsRounds).toFixed(2)),
          putts3: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.putts3, totalsRounds).toFixed(2)),
          puttsAttempts: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.puttsAttempts, totalsRounds).toFixed(2)),
          puttsAverage: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.puttsAverage, totalsRounds).toFixed(2)),
          puttsAverageDistance: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.puttsAverageDistance, totalsRounds).toFixed(2)),
          puttsHoled: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.puttsHoled, totalsRounds).toFixed(2)),
          puttsSecondAverageLength: Number(divide(totalScores.putts.puttsStatistics.puttsU2M.puttsSecondAverageLength, totalsRounds).toFixed(2)),
        },
        putts24M: {
          distanceFirstPutt: Number(divide(totalScores.putts.puttsStatistics.putts24M.distanceFirstPutt, totalsRounds).toFixed(2)),
          distanceSecondPutt: Number(divide(totalScores.putts.puttsStatistics.putts24M.distanceSecondPutt, totalsRounds).toFixed(2)),
          numberPuttsInRange: Number(divide(totalScores.putts.puttsStatistics.putts24M.numberPuttsInRange, totalsRounds).toFixed(2)),
          numberSecondPutt: Number(divide(totalScores.putts.puttsStatistics.putts24M.numberSecondPutt, totalsRounds).toFixed(2)),
          putt1Perc: Number(divide(totalScores.putts.puttsStatistics.putts24M.putt1Perc, totalsRounds).toFixed(2)),
          putt3Perc: Number(divide(totalScores.putts.puttsStatistics.putts24M.putt3Perc, totalsRounds).toFixed(2)),
          putts3: Number(divide(totalScores.putts.puttsStatistics.putts24M.putts3, totalsRounds).toFixed(2)),
          puttsAttempts: Number(divide(totalScores.putts.puttsStatistics.putts24M.puttsAttempts, totalsRounds).toFixed(2)),
          puttsAverage: Number(divide(totalScores.putts.puttsStatistics.putts24M.puttsAverage, totalsRounds).toFixed(2)),
          puttsAverageDistance: Number(divide(totalScores.putts.puttsStatistics.putts24M.puttsAverageDistance, totalsRounds).toFixed(2)),
          puttsHoled: Number(divide(totalScores.putts.puttsStatistics.putts24M.puttsHoled, totalsRounds).toFixed(2)),
          puttsSecondAverageLength: Number(divide(totalScores.putts.puttsStatistics.putts24M.puttsSecondAverageLength, totalsRounds).toFixed(2)),
        },
        putts46M: {
          distanceFirstPutt: Number(divide(totalScores.putts.puttsStatistics.putts46M.distanceFirstPutt, totalsRounds).toFixed(2)),
          distanceSecondPutt: Number(divide(totalScores.putts.puttsStatistics.putts46M.distanceSecondPutt, totalsRounds).toFixed(2)),
          numberPuttsInRange: Number(divide(totalScores.putts.puttsStatistics.putts46M.numberPuttsInRange, totalsRounds).toFixed(2)),
          numberSecondPutt: Number(divide(totalScores.putts.puttsStatistics.putts46M.numberSecondPutt, totalsRounds).toFixed(2)),
          putt1Perc: Number(divide(totalScores.putts.puttsStatistics.putts46M.putt1Perc, totalsRounds).toFixed(2)),
          putt3Perc: Number(divide(totalScores.putts.puttsStatistics.putts46M.putt3Perc, totalsRounds).toFixed(2)),
          putts3: Number(divide(totalScores.putts.puttsStatistics.putts46M.putts3, totalsRounds).toFixed(2)),
          puttsAttempts: Number(divide(totalScores.putts.puttsStatistics.putts46M.puttsAttempts, totalsRounds).toFixed(2)),
          puttsAverage: Number(divide(totalScores.putts.puttsStatistics.putts46M.puttsAverage, totalsRounds).toFixed(2)),
          puttsAverageDistance: Number(divide(totalScores.putts.puttsStatistics.putts46M.puttsAverageDistance, totalsRounds).toFixed(2)),
          puttsHoled: Number(divide(totalScores.putts.puttsStatistics.putts46M.puttsHoled, totalsRounds).toFixed(2)),
          puttsSecondAverageLength: Number(divide(totalScores.putts.puttsStatistics.putts46M.puttsSecondAverageLength, totalsRounds).toFixed(2)),
        },
        putts610M: {
          distanceFirstPutt: Number(divide(totalScores.putts.puttsStatistics.putts610M.distanceFirstPutt, totalsRounds).toFixed(2)),
          distanceSecondPutt: Number(divide(totalScores.putts.puttsStatistics.putts610M.distanceSecondPutt, totalsRounds).toFixed(2)),
          numberPuttsInRange: Number(divide(totalScores.putts.puttsStatistics.putts610M.numberPuttsInRange, totalsRounds).toFixed(2)),
          numberSecondPutt: Number(divide(totalScores.putts.puttsStatistics.putts610M.numberSecondPutt, totalsRounds).toFixed(2)),
          putt1Perc: Number(divide(totalScores.putts.puttsStatistics.putts610M.putt1Perc, totalsRounds).toFixed(2)),
          putt3Perc: Number(divide(totalScores.putts.puttsStatistics.putts610M.putt3Perc, totalsRounds).toFixed(2)),
          putts3: Number(divide(totalScores.putts.puttsStatistics.putts610M.putts3, totalsRounds).toFixed(2)),
          puttsAttempts: Number(divide(totalScores.putts.puttsStatistics.putts610M.puttsAttempts, totalsRounds).toFixed(2)),
          puttsAverage: Number(divide(totalScores.putts.puttsStatistics.putts610M.puttsAverage, totalsRounds).toFixed(2)),
          puttsAverageDistance: Number(divide(totalScores.putts.puttsStatistics.putts610M.puttsAverageDistance, totalsRounds).toFixed(2)),
          puttsHoled: Number(divide(totalScores.putts.puttsStatistics.putts610M.puttsHoled, totalsRounds).toFixed(2)),
          puttsSecondAverageLength: Number(divide(totalScores.putts.puttsStatistics.putts610M.puttsSecondAverageLength, totalsRounds).toFixed(2)),
        },
        puttsO10M: {
          distanceFirstPutt: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.distanceFirstPutt, totalsRounds).toFixed(2)),
          distanceSecondPutt: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.distanceSecondPutt, totalsRounds).toFixed(2)),
          numberPuttsInRange: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.numberPuttsInRange, totalsRounds).toFixed(2)),
          numberSecondPutt: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.numberSecondPutt, totalsRounds).toFixed(2)),
          putt1Perc: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.putt1Perc, totalsRounds).toFixed(2)),
          putt3Perc: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.putt3Perc, totalsRounds).toFixed(2)),
          putts3: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.putts3, totalsRounds).toFixed(2)),
          puttsAttempts: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.puttsAttempts, totalsRounds).toFixed(2)),
          puttsAverage: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.puttsAverage, totalsRounds).toFixed(2)),
          puttsAverageDistance: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.puttsAverageDistance, totalsRounds).toFixed(2)),
          puttsHoled: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.puttsHoled, totalsRounds).toFixed(2)),
          puttsSecondAverageLength: Number(divide(totalScores.putts.puttsStatistics.puttsO10M.puttsSecondAverageLength, totalsRounds).toFixed(2)),
        },
        _puttsOverall: {
          birdieBetter: Number(divide(totalScores.putts.puttsStatistics._puttsOverall.birdieBetter, totalsRounds).toFixed(2)),
          birdieConversion: Number(divide(totalScores.putts.puttsStatistics._puttsOverall.birdieConversion, totalsRounds).toFixed(2)),
          gir: Number(divide(totalScores.putts.puttsStatistics._puttsOverall.gir, totalsRounds).toFixed(2)),
          puttsInGIR: Number(divide(totalScores.putts.puttsStatistics._puttsOverall.puttsInGIR, totalsRounds).toFixed(2)),
          threePutts: Number(divide(totalScores.putts.puttsStatistics._puttsOverall.threePutts, totalsRounds).toFixed(2)),
          totalPutts: Number(divide(totalScores.putts.puttsStatistics._puttsOverall.totalPutts, totalsRounds).toFixed(2)),
          totalPuttsInGIR: Number(divide(totalScores.putts.puttsStatistics._puttsOverall.totalPuttsInGIR, totalsRounds).toFixed(2)),
        }
      },
    },
    sand: {
      totals: Number(divide(totalScores.sand.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.sand.avg), totalsRounds).toFixed(2)),
      saved: Number(divide(totalScores.sand.saved, totalsRounds).toFixed(2)),
      avgSaved: Number(divide(Number(totalScores.sand.avgSaved), totalsRounds).toFixed(2)),
      savedPerc: Number(divide(totalScores.sand.savedPerc, totalsRounds).toFixed(2)),
    },
    water: {
      totals: Number(divide(totalScores.water.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.water.avg), totalsRounds).toFixed(2)),
      totalsIN: Number(divide(totalScores.water.totalsIN, totalsRounds).toFixed(2)),
      avgIN: Number(divide(Number(totalScores.water.avgIN), totalsRounds).toFixed(2)),
      totalsOUT: Number(divide(totalScores.water.totalsOUT, totalsRounds).toFixed(2)),
      avgOUT: Number(divide(Number(totalScores.water.avgOUT), totalsRounds).toFixed(2)),
    },
    out: {
      totals: Number(divide(totalScores.out.totals, totalsRounds).toFixed(2)),
      avg: Number(divide(Number(totalScores.out.avg), totalsRounds).toFixed(2)),
      totalsIN: Number(divide(totalScores.out.totalsIN, totalsRounds).toFixed(2)),
      avgIN: Number(divide(Number(totalScores.out.avgIN), totalsRounds).toFixed(2)),
      totalsOUT: Number(divide(totalScores.out.totalsOUT, totalsRounds).toFixed(2)),
      avgOUT: Number(divide(Number(totalScores.out.avgOUT), totalsRounds).toFixed(2)),
    }

  }

  return finalTotals;
}